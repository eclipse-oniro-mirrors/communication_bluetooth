/*
 * Copyright (C) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@!namespace("@ohos.bluetooth.a2dp", "a2dp")
@!sts_inject("""
static { loadLibrary("bluetoothA2dp_taihe_native.z") }
""")

from ohos.bluetooth.baseProfile use BaseProfile; 
interface A2dpSourceProfile : BaseProfile {
    SetCurrentCodecInfo(deviceId: String, codecInfo: CodecInfo): void;

    GetCurrentCodecInfo(deviceId: String): CodecInfo;

    GetPlayingState(deviceId: String): PlayingState;

    Connect(deviceId: String): void;

    Disconnect(deviceId: String): void;

    @promise GetAutoPlayDisabledDuration(deviceId: String): i32;

    @promise DisableAutoPlay(deviceId: String, duration: i32): void;

    @promise EnableAutoPlay(deviceId: String): void;
}

enum CodecType: i32 {
    CODEC_TYPE_INVALID = -1,
    CODEC_TYPE_SBC = 0,
    CODEC_TYPE_AAC = 1,
    CODEC_TYPE_L2HC = 2,
    CODEC_TYPE_L2HCST = 3,
    CODEC_TYPE_LDAC = 4
}

enum CodecChannelMode: i32 {
    CODEC_CHANNEL_MODE_NONE = 0,
    CODEC_CHANNEL_MODE_MONO = 1,
    CODEC_CHANNEL_MODE_STEREO = 2
}

enum CodecSampleRate: i32 {
    CODEC_SAMPLE_RATE_NONE = 0,
    CODEC_SAMPLE_RATE_44100 = 1,
    CODEC_SAMPLE_RATE_48000 = 2,
    CODEC_SAMPLE_RATE_88200 = 3,
    CODEC_SAMPLE_RATE_96000 = 4,
    CODEC_SAMPLE_RATE_176400 = 5,
    CODEC_SAMPLE_RATE_192000 = 6
}

enum CodecBitsPerSample: i32 {
    CODEC_BITS_PER_SAMPLE_NONE = 0,
    CODEC_BITS_PER_SAMPLE_16 = 1,
    CODEC_BITS_PER_SAMPLE_24 = 2,
    CODEC_BITS_PER_SAMPLE_32 = 3
}

enum PlayingState: i32 {
    STATE_NOT_PLAYING,
    STATE_PLAYING
}

struct CodecInfo {
    codecType: CodecType;
    codecBitsPerSample: CodecBitsPerSample;
    codecChannelMode: CodecChannelMode;
    codecSampleRate: CodecSampleRate;
}

function CreateA2dpSrcProfile(): A2dpSourceProfile;
