# Copyright (C) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import("//foundation/communication/bluetooth/bluetooth.gni")

SUBSYSTEM_DIR = "//foundation/communication"

config("btframework_config") {
  cflags_cc = [
    "-fPIC",
    "-Wno-unused-parameter",
    "-Wunused-private-field",
  ]
  include_dirs = [
    "//utils/system/safwk/native/include",
    "//foundation/communication/bluetooth/services/bluetooth/common/",
    "include",
    "//foundation/communication/bluetooth/interfaces/inner_api/include",
    "//foundation/communication/bluetooth/frameworks/inner/common",
    "//foundation/communication/bluetooth/interfaces/inner_api/include/c_header",
  ]
}

config("btframework_public_config") {
  include_dirs = [
    "//foundation/communication/bluetooth/interfaces/inner_api/include",
    "//foundation/communication/bluetooth/services/bluetooth/common/",
  ]
}

ohos_shared_library("btframework") {
  # uncomment to enable cfi for libbtframework.z.so
  # sanitize = {
  #   cfi = true
  #   blocklist = "./frameworks_inner_blocklist.txt"
  # }
  stack_protector_ret = true
  configs = [ ":btframework_config" ]
  public_configs = [ ":btframework_public_config" ]
  sources = [
    "c_adapter/ohos_bt_adapter_utils.cpp",
    "c_adapter/ohos_bt_gap.cpp",
    "c_adapter/ohos_bt_gatt.cpp",
    "c_adapter/ohos_bt_gatt_client.cpp",
    "c_adapter/ohos_bt_gatt_server.cpp",
    "c_adapter/ohos_bt_spp.cpp",
    "src/bluetooth_ble_advertiser.cpp",
    "src/bluetooth_ble_central_manager.cpp",
    "src/bluetooth_device_class.cpp",
    "src/bluetooth_gatt_characteristic.cpp",
    "src/bluetooth_gatt_client.cpp",
    "src/bluetooth_gatt_descriptor.cpp",
    "src/bluetooth_gatt_manager.cpp",
    "src/bluetooth_gatt_server.cpp",
    "src/bluetooth_gatt_service.cpp",
    "src/bluetooth_host.cpp",
    "src/bluetooth_proxy_manager.cpp",
    "src/bluetooth_remote_device.cpp",
    "src/bluetooth_socket.cpp",
    "src/bluetooth_socket_inputstream.cpp",
    "src/bluetooth_socket_outputstream.cpp",
    "src/bluetooth_utils.cpp",
  ]

  defines = []

  if (bluetooth_a2dp_sink_feature) {
    sources += [ "src/bluetooth_a2dp_snk.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_a2dp_snk.cpp" ]
  }

  if (bluetooth_a2dp_source_feature) {
    sources += [ "src/bluetooth_a2dp_src.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_a2dp_src.cpp" ]
  }

  if (bluetooth_avrcp_ct_feature) {
    sources += [ "src/bluetooth_avrcp_ct.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_avrcp_ct.cpp" ]
  }

  if (bluetooth_avrcp_tg_feature) {
    sources += [ "src/bluetooth_avrcp_tg.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_avrcp_tg.cpp" ]
  }

  if (bluetooth_hfp_ag_feature) {
    sources += [ "src/bluetooth_hfp_ag.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_hfp_ag.cpp" ]
  }

  if (bluetooth_hfp_hf_feature) {
    sources += [ "src/bluetooth_hfp_hf.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_hfp_hf.cpp" ]
  }

  if (bluetooth_hid_host_feature) {
    sources += [ "src/bluetooth_hid_host.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_hid_host.cpp" ]
  }

  if (bluetooth_map_client_feature) {
    sources += [ "src/bluetooth_map_mce.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_map_mce.cpp" ]
  }

  if (bluetooth_map_server_feature) {
    sources += [ "src/bluetooth_map_mse.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_map_mse.cpp" ]
  }

  if (bluetooth_opp_feature) {
    sources += [ "src/bluetooth_opp.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_opp.cpp" ]
  }

  if (bluetooth_pan_feature) {
    sources += [ "src/bluetooth_pan.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_pan.cpp" ]
  }

  if (bluetooth_pbap_client_feature) {
    sources += [ "src/bluetooth_pbap_pce.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_pbap_pce.cpp" ]
  }

  if (bluetooth_pbap_server_feature) {
    sources += [ "src/bluetooth_pbap_pse.cpp" ]
  } else {
    sources += [ "src/mock/bluetooth_pbap_pse.cpp" ]
  }

  deps = [ "$SUBSYSTEM_DIR/bluetooth/services/bluetooth/ipc:btipc_static" ]

  external_deps = [
    "c_utils:utils",
    "hisysevent_native:libhisysevent",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]

  subsystem_name = "communication"
  innerapi_tags = [ "platformsdk" ]
  part_name = "bluetooth"
}
